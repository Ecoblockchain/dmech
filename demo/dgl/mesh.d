/*
Copyright (c) 2013 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dgl.mesh;

import derelict.opengl.gl;
import derelict.opengl.glu;
import dlib.math.vector;
import dlib.geometry.trimesh;
//import dlib.geometry.sphere;
import dgl.dat;
import dgl.graphics.gobject;

TriMesh datToTriMesh(DatObject datObj)
{
    TriMesh mesh;

    TriMesh.FaceGroup[int] fgroups;
    
    foreach(tri; datObj.tris)
    {
        uint a, b, c;

        a = mesh.vertices.length;
        b = mesh.vertices.length + 1;
        c = mesh.vertices.length + 2;

        mesh.vertices ~= tri.v[0]; 
        mesh.vertices ~= tri.v[1];
        mesh.vertices ~= tri.v[2];

        mesh.normals ~= tri.n[0]; 
        mesh.normals ~= tri.n[1];
        mesh.normals ~= tri.n[2];

        mesh.texcoords1 ~= tri.t1[0]; 
        mesh.texcoords1 ~= tri.t1[1];
        mesh.texcoords1 ~= tri.t1[2];

        mesh.texcoords2 ~= tri.t2[0]; 
        mesh.texcoords2 ~= tri.t2[1];
        mesh.texcoords2 ~= tri.t2[2];

        mesh.numTexCoords = 2;

        int m = tri.materialIndex;
          
        if (!(m in fgroups))
        {
            TriMesh.FaceGroup fg;
            fg.indices ~= TriMesh.Index(a, b, c);
            fg.materialIndex = m;
            fgroups[m] = fg;
        }
        else
        {
            fgroups[m].indices ~= TriMesh.Index(a, b, c);
        }
    }  

    foreach(fg; fgroups)
        mesh.facegroups ~= fg;

    mesh.genTangents();

    return mesh;
}

class GMesh: GraphicObject
{
    uint displayList;

    this(ref TriMesh mesh)
    {
        displayList = glGenLists(1);
        glNewList(displayList, GL_COMPILE);

        foreach(ref fg; mesh.facegroups)
        {
            glBegin(GL_TRIANGLES);
            foreach(ref index; fg.indices)
            {
                uint i0 = index.a; //tri.i0;
                uint i1 = index.b; //tri.i1;
                uint i2 = index.c; //tri.i2;

                Vector3f v0 = mesh.vertices[i0];
                Vector3f v1 = mesh.vertices[i1];
                Vector3f v2 = mesh.vertices[i2];

                Vector3f n0 = mesh.vertices[i0];
                Vector3f n1 = mesh.vertices[i1];
                Vector3f n2 = mesh.vertices[i2];

                Vector2f t10 = mesh.texcoords1[i0];
                Vector2f t11 = mesh.texcoords1[i1];
                Vector2f t12 = mesh.texcoords1[i2];

                Vector2f t20 = mesh.texcoords2[i0];
                Vector2f t21 = mesh.texcoords2[i1];
                Vector2f t22 = mesh.texcoords2[i2];

                Vector3f t0 = mesh.tangents[i0];
                Vector3f t1 = mesh.tangents[i1];
                Vector3f t2 = mesh.tangents[i2];

                glColor3fv(t0.arrayof.ptr);
                glNormal3fv(n0.arrayof.ptr);
                glTexCoord2fv(t10.arrayof.ptr);
                //glMultiTexCoord2fvARB(GL_TEXTURE0_ARB, t10.arrayof.ptr);
                //glMultiTexCoord2fvARB(GL_TEXTURE1_ARB, t20.arrayof.ptr);
                glVertex3fv(v0.arrayof.ptr);

                glColor3fv(t1.arrayof.ptr);     
                glNormal3fv(n1.arrayof.ptr);
                glTexCoord2fv(t11.arrayof.ptr);
                //glMultiTexCoord2fvARB(GL_TEXTURE0_ARB, t11.arrayof.ptr);
                //glMultiTexCoord2fvARB(GL_TEXTURE1_ARB, t21.arrayof.ptr);
                glVertex3fv(v1.arrayof.ptr);

                glColor3fv(t2.arrayof.ptr);  
                glNormal3fv(n2.arrayof.ptr);
                glTexCoord2fv(t12.arrayof.ptr);
                //glMultiTexCoord2fvARB(GL_TEXTURE0_ARB, t12.arrayof.ptr);
                //glMultiTexCoord2fvARB(GL_TEXTURE1_ARB, t22.arrayof.ptr);
                glVertex3fv(v2.arrayof.ptr);
            }
            glEnd();
        }            
        glEndList();
    }

    override void render(double delta)
    {
        glCallList(displayList);
    }
}

