/*
Copyright (c) 2014 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module main;

import std.stdio;
import std.algorithm;

import derelict.sdl.sdl;
import derelict.opengl.gl;

import dlib.math.vector;
import dlib.math.utils;
import dlib.image.color;

import dgl.core.application;
import dgl.core.drawable;
import dgl.graphics.primitives;
import dgl.graphics.material;
import dgl.graphics.gobject;
import dgl.scene.sceneobject;
import dgl.scene.tbcamera;
import dgl.freeview;

import dmech.geometry;
import dmech.rigidbody;
import dmech.world;
import dmech.pairhashtable;

import shapeobject;

void drawVector(Vector3f vec, Vector3f col)
{
    glDisable(GL_LIGHTING);
    glColor3f(col.x, col.y, col.z);
    glBegin(GL_LINES);
    glVertex3f(0.0f, 0.0f, 0.0f);
    glVertex3fv(vec.arrayof.ptr);
    glEnd();
    glPointSize(5.0f);
    glBegin(GL_POINTS);
    glVertex3fv(vec.arrayof.ptr);
    glEnd();
    glPointSize(1.0f);
    glEnable(GL_LIGHTING);
}

class TestApp: FreeViewApplication
{
    alias manager this;

    ShapeObject[] sceneObjects;

    Vector4f lightPos = Vector4f(10.0f, 20.0f, 5.0f, 1.0f);
    
    bool showContacts = false;
    bool gravity = true;

    World world;
    RigidBody activeBody;

    void buildPyramid(uint pyramidSize)
    {
        float size = 1.0f;

        float cubeHeight = 2.0f;

        auto box = new GBox(Vector3f(size, cubeHeight * 0.5f, size));
        auto cyl = new GCylinder(2.0f, 1.0f);
        auto con = new GCone(2.0f, 1.0f);
        auto sph = new GSphere(1.0f);

        float width = size * 2.0f;
        float height = cubeHeight;
        float horizontal_spacing = 0.1f;
        float veritcal_spacing = 0.1f;

        enum pyramidGeom = 1;

        auto geomBox = new GeomBox(Vector3f(size, cubeHeight * 0.5f, size));
        auto geomCylinder = new GeomCylinder(2.0f, 1.0f); 
        auto geomSphere = new GeomSphere(size); 
        auto geomCone = new GeomCone(2.0f, 1.0f); 

        foreach(i; 0..pyramidSize)
        foreach(e; i..pyramidSize)
        {
            auto position = Vector3f(
                (e - i * 0.5f) * (width + horizontal_spacing) - ((width + horizontal_spacing) * 5), 
                6.0f + (height + veritcal_spacing * 0.5f) + i * height + 0.26f,
                0.0f);

            Geometry g;
            GraphicObject gobj;

            switch(pyramidGeom)
            {
                case 0:
                    g = geomBox;
                    gobj = box;
                    break;
                case 1:
                    g = geomCylinder;
                    gobj = cyl;
                    break;
                case 2:
                    g = geomSphere; 
                    gobj = sph;
                    break;
                case 4:
                    g = geomCone;
                    gobj = con;
                    break;
                default:
                    assert(0);
            }

            auto b = world.addDynamicBody(position, 0);
            world.addShapeComponent(b, g, Vector3f(0, 0, 0), 1);

            auto gameObj = new ShapeObject();
            gameObj.gobj = gobj; 
            gameObj.shape = b.shapes[0];

            Material mat = new Material();
            auto col = Color4f((randomUnitVector3!float + 0.5f).normalized);
            mat.ambientColor = col;
            mat.diffuseColor = col;
            gameObj.material = mat;

            sceneObjects ~= gameObj;
        }
    }

    void buildStack(Vector3f pos, uint num)
    {
        auto geomBox = new GeomBox(Vector3f(1, 1, 1));
        auto gBox = new GBox(Vector3f(1, 1, 1));

        foreach(n; 0..num)
        {
            RigidBody bBox = world.addDynamicBody(pos + Vector3f(0, 1 + n * 2, 0), 0.0f);
            world.addShapeComponent(bBox, geomBox, Vector3f(0, 0, 0), 1.0f);

            auto oBox = new ShapeObject();
            oBox.gobj = gBox;
            oBox.shape = bBox.shapes[0];
            sceneObjects ~= oBox;

            Material mat = new Material();
            auto col = Color4f((randomUnitVector3!float + 0.5f).normalized);
            mat.ambientColor = col;
            mat.diffuseColor = col;
            oBox.material = mat;
        }
    }

    this()
    {
        super(640, 480, "Physics Test");
        drawAxes = true;

        glEnable(GL_LIGHTING);
        glEnable(GL_LIGHT0);

        world = new World();

        auto geomFloorBox = new GeomBox(Vector3f(100, 1, 100));
        RigidBody bFloor = world.addStaticBody(Vector3f(0, -1, 0));
        world.addShapeComponent(bFloor, geomFloorBox, Vector3f(0, 0, 0), 1);

        enum hsize = 0.5f;
        auto geomSphere = new GeomSphere(hsize);
        auto geomBox1 = new GeomBox(Vector3f(0.1f, 1.0f, 0.1f));
        auto geomBox2 = new GeomBox(Vector3f(1.0f, 0.1f, 1.0f));
        RigidBody bComposite = world.addDynamicBody(Vector3f(0, 10, 4), 0.0f);
        world.addShapeComponent(bComposite, geomBox1,    Vector3f(-0.9f,  0,  0.9f), 0.2f);
        world.addShapeComponent(bComposite, geomBox1,    Vector3f( 0.9f,  0,  0.9f), 0.2f);
        world.addShapeComponent(bComposite, geomBox1,    Vector3f(-0.9f,  0, -0.9f), 0.2f);
        world.addShapeComponent(bComposite, geomBox1,    Vector3f( 0.9f,  0, -0.9f), 0.2f);
        world.addShapeComponent(bComposite, geomBox2,    Vector3f( 0,  1.0f,  0), 0.5f);

        //activeBody = bComposite;

        auto geomSphere1 = new GeomSphere(1.0f);
        RigidBody bSphere = world.addDynamicBody(Vector3f(4, 10, 0));
        world.addShapeComponent(bSphere, geomSphere1, Vector3f(0, 0, 0), 1.0f);
        activeBody = bSphere;

        auto gSphere1 = new GSphere(1.0f);
        auto sobj1 = new ShapeObject();
        sobj1.gobj = gSphere1;
        sobj1.shape = bSphere.shapes[0];
        sceneObjects ~= sobj1;

        auto gSphere = new GSphere(hsize);
        auto gBox1 = new GBox(Vector3f(0.1f, 1.0f, 0.1f));
        auto gBox2 = new GBox(Vector3f(1.0f, 0.1f, 1.0f));

        Material mat = new Material();
        auto col = Color4f(1, 0, 0, 1);
        mat.ambientColor = col;
        mat.diffuseColor = col;

        auto obj1 = new ShapeObject();
        obj1.gobj = gBox1;
        obj1.shape = bComposite.shapes[0];
        sceneObjects ~= obj1;
        obj1.material = mat;

        auto obj2 = new ShapeObject();
        obj2.gobj = gBox1;
        obj2.shape = bComposite.shapes[1];
        sceneObjects ~= obj2;
        obj2.material = mat;

        auto obj3 = new ShapeObject();
        obj3.gobj = gBox1;
        obj3.shape = bComposite.shapes[2];
        sceneObjects ~= obj3;
        obj3.material = mat;

        auto obj4 = new ShapeObject();
        obj4.gobj = gBox1;
        obj4.shape = bComposite.shapes[3];
        sceneObjects ~= obj4;
        obj4.material = mat;

        auto obj5 = new ShapeObject();
        obj5.gobj = gBox2;
        obj5.shape = bComposite.shapes[4];
        sceneObjects ~= obj5;
        obj5.material = mat;

        Vector3f a = Vector3f(0, 0, -4), b = Vector3f(0, 0, 4), c = Vector3f(8, 0, 0);
        auto gTri = new GTriangle(a, b, c);
        auto geomTri = new GeomTriangle(a, b, c);
        RigidBody bTri = world.addStaticBody(Vector3f(0, 1, 7));
        world.addShapeComponent(bTri, geomTri, Vector3f(0, 0, 0), 1);
        auto objTri = new ShapeObject();
        objTri.gobj = gTri;
        objTri.shape = bTri.shapes[0];
        sceneObjects ~= objTri;

        buildPyramid(6);
        //buildStack(Vector3f(-3, 2, 0), 10);
    }
    
    override void onKeyDown()
    {
        super.onKeyDown();
        
        if (event_key == 'c')
            showContacts = !showContacts;
        else if (event_key == 'g')
            gravity = !gravity;
        else if (event_key == 'i')
        {
            writefln("transformation:\n%s", activeBody.transformation);
            writefln("position:\n%s", activeBody.position);
            writefln("linearVelocity:\n%s", activeBody.linearVelocity);
        }
    }
    
    override void onMouseButtonDown()
    {
        super.onMouseButtonDown();
    }

    override void onDraw3D()
    {
        processInput();

        if (gravity)
            world.gravity = Vector3f(0.0f, -9.80665f, 0.0f);
        else
            world.gravity = Vector3f(0.0f, 0.0f, 0.0f);
        
        world.update(1.0 / 60.0);

        glLightfv(GL_LIGHT0, GL_POSITION, lightPos.arrayof.ptr);
        foreach(obj; sceneObjects)
            obj.draw(deltaTime);
        if (showContacts)
            drawContacts();
    }
    
    override void onDraw2D()
    {
    }
    
    void processInput()
    {
        float forceMagnitude = 40.0f;
    
        if (key_pressed[SDLK_PAGEUP])
            activeBody.applyForce(Vector3f(0.0f, forceMagnitude, 0.0f));
        if (key_pressed[SDLK_PAGEDOWN])
            activeBody.applyForce(Vector3f(0.0f, -forceMagnitude, 0.0f));

        Vector3f right = tbcamera.getRightVector;
        Vector3f forward = cross(Vector3f(0.0f, 1.0f, 0.0f), right);

        if (key_pressed[SDLK_LEFT])
            activeBody.applyForce(-right * forceMagnitude);
        if (key_pressed[SDLK_RIGHT])
            activeBody.applyForce( right * forceMagnitude);
            
        if (key_pressed[SDLK_DOWN])
            activeBody.applyForce(-forward * forceMagnitude);
        if (key_pressed[SDLK_UP])
            activeBody.applyForce( forward * forceMagnitude);
    }

    void drawContacts()
    {
        glDisable(GL_LIGHTING);
        glDisable(GL_DEPTH_TEST);
        glPointSize(5.0f);

        foreach(ref m; world.manifolds)
        foreach(i; 0..m.numContacts)
        {
            auto c = m.contacts[i];
            if (c.fact)
            {
                Vector3f p1 = c.point;
                Vector3f p2 = c.point + c.normal * 0.5f;
                Vector3f p3 = c.point + c.fdir1 * 0.5f;
                Vector3f p4 = c.point + c.fdir2 * 0.5f;

                // Draw point
                glColor3f(1.0f, 1.0f, 1.0f);
                glBegin(GL_POINTS);
                glVertex3fv(p1.arrayof.ptr);
                glEnd();

                // Draw normal
                glColor3f(0.0f, 1.0f, 0.0f);
                glBegin(GL_LINES);
                glVertex3fv(p1.arrayof.ptr);
                glVertex3fv(p2.arrayof.ptr);
                glEnd();

                // Draw fdir1
                glColor3f(1.0f, 0.0f, 0.0f);
                glBegin(GL_LINES);
                glVertex3fv(p1.arrayof.ptr);
                glVertex3fv(p3.arrayof.ptr);
                glEnd();

                // Draw fdir2
                glColor3f(0.0f, 0.0f, 1.0f);
                glBegin(GL_LINES);
                glVertex3fv(p1.arrayof.ptr);
                glVertex3fv(p4.arrayof.ptr);
                glEnd();
            }
        }

        glPointSize(1.0f);
        glEnable(GL_DEPTH_TEST);
        glEnable(GL_LIGHTING);
    }
}

void main()
{
    auto app = new TestApp();
    app.run();
}

