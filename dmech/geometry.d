/*
Copyright (c) 2013 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module geometry;

import std.math;

import dlib.math.vector;
import dlib.math.matrix;
import dlib.math.affine;
import dlib.math.utils;
import dlib.geometry.aabb;
import dlib.geometry.sphere;

import dmech.bvh;

enum GeomType
{
    Undefined,
    Sphere,
    Box,
    Cylinder,
    Cone,
    Ellipsoid,
    Triangle
}

abstract class Geometry
{
    GeomType type = GeomType.Undefined;
    Matrix4x4f transformation;

    this()
    {
        transformation = Matrix4x4f.identity;
    }
    
    @property Vector3f position()
    {
        return transformation.translation;
    }
    
    Vector3f supportPoint(Vector3f dir)
    {
        return Vector3f(0.0f, 0.0f, 0.0f);
    }

    @property Sphere boundingSphere()
    {
        return Sphere(position, 1.0f);
    }

    Matrix3x3f inertiaTensor(float mass)
    {
        return Matrix3x3f.identity * mass;
    }
}

class GeomSphere: Geometry
{
    float radius;
    
    this(float r)
    {
        super();
        type = GeomType.Sphere;
        radius = r;
    }

    override Vector3f supportPoint(Vector3f dir)
    {
        return dir.normalized * radius;
    }

    override @property Sphere boundingSphere()
    {
        return Sphere(position, radius);
    }

    override Matrix3x3f inertiaTensor(float mass)
    {
        float v = 0.4f * mass * radius * radius;

        return matrixf(
            v, 0, 0,
            0, v, 0,
            0, 0, v
        );
    }
}

class GeomBox: Geometry
{
    Vector3f halfSize;

    this(Vector3f hsize)
    {
        super();
        type = GeomType.Box;
        halfSize = hsize;
    }

    override Vector3f supportPoint(Vector3f dir)
    {
        Vector3f result;
        result.x = sign(dir.x) * halfSize.x;
        result.y = sign(dir.y) * halfSize.y;
        result.z = sign(dir.z) * halfSize.z;
        return result;
    }

    override @property Sphere boundingSphere()
    {
        return Sphere(position, halfSize.length);
    }

    override Matrix3x3f inertiaTensor(float mass)
    {
        float x2 = halfSize.x * halfSize.x;
        float y2 = halfSize.y * halfSize.y;
        float z2 = halfSize.z * halfSize.z;

        return matrixf(
            (y2 + z2)/3 * mass, 0, 0,
            0, (x2 + z2)/3 * mass, 0,
            0, 0, (x2 + y2)/3 * mass
        );
    }
}

class GeomCylinder: Geometry
{
    float height;
    float radius;
    
    this(float h, float r)
    {
        super();
        type = GeomType.Cylinder;
        height = h;
        radius = r;
    }

    override Vector3f supportPoint(Vector3f dir)
    {
        Vector3f result;
        float sigma = sqrt((dir.x * dir.x + dir.z * dir.z));

        if (sigma > 0.0f)
        {
            result.x = dir.x / sigma * radius;
            result.y = sign(dir.y) * height * 0.5f;
            result.z = dir.z / sigma * radius;
        }
        else
        {
            result.x = 0.0f;
            result.y = sign(dir.y) * height * 0.5f;
            result.z = 0.0f;
        }
        
        return result;
    }
    
    override Matrix3x3f inertiaTensor(float mass)
    {
        float r2 = radius * radius;
        float h2 = height * height;

        return matrixf(
            (3*r2 + h2)/12 * mass, 0, 0,
            0, (3*r2 + h2)/12 * mass, 0,
            0, 0, r2/2 * mass
        );
    }

    // TODO: boundingSphere
}

class GeomCone: Geometry
{
    float radius;
    float height;

    this(float h, float r)
    {
        super();
        type = GeomType.Cone;
        height = h;
        radius = r;
    }

    override Vector3f supportPoint(Vector3f dir)
    {
        float zdist = dir[0] * dir[0] + dir[1] * dir[1];
        float len = zdist + dir[2] * dir[2];
        zdist = sqrt(zdist);
        len = sqrt(len);
        float half_h = height * 0.5;
        float radius = radius;

        float sin_a = radius / sqrt(radius * radius + 4.0f * half_h * half_h);

        if (dir[2] > len * sin_a)
            return Vector3f(0.0f, 0.0f, half_h);
        else if (zdist > 0.0f)
        {
            float rad = radius / zdist;
            return Vector3f(rad * dir[0], rad * dir[1], -half_h);
        }
        else
            return Vector3f(0.0f, 0.0f, -half_h);
    }

    override Matrix3x3f inertiaTensor(float mass)
    {
        float r2 = radius * radius;
        float h2 = height * height;
/*
        return matrixf(
            (3/5*h2 + 3/10*r2) * mass, 0, 0,
            0, (3/5*h2 + 3/10*r2) * mass, 0,
            0, 0, (3/10*r2) * mass
        );
*/
        return matrixf(
            (3.0f/80.0f*h2 + 3.0f/20.0f*r2) * mass, 0, 0,
            0, (3.0f/80.0f*h2 + 3.0f/20.0f*r2) * mass, 0,
            0, 0, (3.0f/10.0f*r2) * mass
        );
    }

    // TODO: boundingSphere
}

class GeomEllipsoid: Geometry
{
    Vector3f radii;

    this(Vector3f r)
    {
        super();
        type = GeomType.Ellipsoid;
        radii = r;
    }

    override Vector3f supportPoint(Vector3f dir)
    {
        return dir.normalized * radii;
    }
    
    override Matrix3x3f inertiaTensor(float mass)
    {
        float x2 = radii.x * radii.x;
        float y2 = radii.y * radii.y;
        float z2 = radii.z * radii.z;

        return matrixf(
            (y2 + z2)/5 * mass, 0, 0,
            0, (x2 + z2)/5 * mass, 0,
            0, 0, (x2 + y2)/5 * mass
        );
    }

    // TODO: boundingSphere
}

class GeomTriangle: Geometry
{
    Vector3f[3] v;
    
    this(Vector3f a, Vector3f b, Vector3f c)
    {
        super();
        type = GeomType.Triangle;
        v[0] = a;
        v[1] = b;
        v[2] = c;
    }
/*
    override Vector3f supportPoint(Vector3f dir)
    {
        float dota = dir.dot(v[0]);
        float dotb = dir.dot(v[1]);
        float dotc = dir.dot(v[2]);
    
        if (dota > dotb)
        {
            if (dotc > dota)
                return v[2];
            else
                return v[0];
        }
        else
        {
            if (dotc > dotb)
                return v[2];
            else
                return v[1];
        }
    }
*/

    override Vector3f supportPoint(Vector3f dir)
    {
        float maxDist = float.min;
        int maxIndex = -1;

        for (int i = 0; i < 3; ++i)
        {
            float result = v[i].dot(dir);
            if (result > maxDist)
            {
                maxIndex = i;
                maxDist = result;
            }
        }
           
        // Slap an epsilon value against the normal of the triangle plane as "volume"
        // So that MPR may terminate before it tries to construct the tetrahedron
        Vector3f point = dir.normalized * EPSILON; //sphere.GetSupportPoint(normal);

        // EDIT: Singularity when 2 centers are perfectly on-line to the normal from the origin
        if (maxDist > EPSILON)
            point += v[maxIndex]; // Standard cases
        else
            point += (v[0] + v[1] + v[2])/3; // Returns centroid instead

        return point;
    }

    // TODO: boundingSphere
}
/*
class GeomBVH: Geometry
{
    BVHTree tree;

    this(BVHTree t)
    {
        tree = t;
    }
}
*/
