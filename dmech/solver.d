/*
Copyright (c) 2013 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dmech.solver;

import std.math;
import std.algorithm;

import dlib.math.vector;
import dlib.math.utils;

import dmech.rigidbody;
import dmech.contact;

void solveContact(Contact c, uint iterations)
{
    RigidBody body1 = c.body1;
    RigidBody body2 = c.body2;
    
    Vector3f r1 = c.point - body1.position;
    Vector3f r2 = c.point - body2.position;
    
    Vector3f relativeVelocity = Vector3f(0.0f, 0.0f, 0.0f);

    relativeVelocity += body1.linearVelocity + cross(body1.angularVelocity, r1);
    relativeVelocity -= body2.linearVelocity + cross(body2.angularVelocity, r2);
    
    float velocityProjection = dot(relativeVelocity, c.normal);
    
    // Check if the bodies are already moving apart
    if (velocityProjection > 0.0f)
        return;
    
    // Calculate normal impulse
    Vector3f n1 = c.normal;
    Vector3f w1 = c.normal.cross(r1);
    Vector3f n2 = -c.normal;
    Vector3f w2 = -(c.normal.cross(r2));
    
    float bounce = 0.4f; //c.restitution
    float a = velocityProjection; // * (1 + bounce);

    a *= iterations;
 
    float b = n1.dot(n1) * body1.invMass
            + w1.dot(w1) * body1.invInertiaMoment
            + n2.dot(n2) * body2.invMass 
            + w2.dot(w2) * body2.invInertiaMoment;
    
    float impulse = (-a / b);
    
    if (impulse < 0.05f)
        return;

    float normalImpulse = impulse;

    // TODO: don't hardcode these
    float hardness = 0.9f;
    float staticFriction = 0.9f;
    float dynamicFriction = 0.9f;

    // Calculate tangent (friction) impulse
    Vector3f tangent = Vector3f(0.0f, 0.0f, 0.0f);
    float tangentSpeed = 0.0f;

    if (velocityProjection != 0.0f)
    {
        Vector3f VonN = relativeVelocity - dot(relativeVelocity, c.normal) * c.normal;
        tangentSpeed = VonN.length;
        if (tangentSpeed > 0)
            tangent = -VonN * (1.0f / tangentSpeed);
    }

    if (tangentSpeed != 0.0f)
    {
        float denom = body1.invMass + body2.invMass;
        
        denom += dot(cross(body1.invInertiaMoment * cross(r1, tangent), r1), tangent);
        denom += dot(cross(body2.invInertiaMoment * cross(r2, tangent), r2), tangent);
        
        float desiredImpulse = tangentSpeed / denom;
        
        float impulseToReverse = desiredImpulse;
        float impulseFromNormalImpulse = impulse * staticFriction;
        
        float frictionImpulse; 
        if (impulseToReverse < impulseFromNormalImpulse)
             frictionImpulse = impulseToReverse;
        else
             frictionImpulse = impulse * dynamicFriction;

        tangent *= frictionImpulse;
    }

    // Apply impulse to bodies
    Vector3f impulseVec = impulse * c.normal + tangent;
    impulseVec /= iterations;
    
    if (body1.type == BodyType.Dynamic) 
        body1.applyImpulseAtPoint(+impulseVec, c.point);
    if (body2.type == BodyType.Dynamic) 
        body2.applyImpulseAtPoint(-impulseVec, c.point);
}

void correctPositions(Contact c)
{
    RigidBody body1 = c.body1;
    RigidBody body2 = c.body2;

    float hardness = 1.0f; //0.95f;

    if (c.body1.type == BodyType.Dynamic && 
        c.body2.type == BodyType.Dynamic)
    {
        Vector3f b1trans = c.normal * c.penetration * 0.5f;
        c.body1.position += b1trans * hardness;
        
        Vector3f b2trans = (-c.normal) * c.penetration * 0.5f;
        c.body2.position += b2trans * hardness;
    }
    else if (c.body1.type == BodyType.Dynamic)
    {
        Vector3f b1trans = c.normal * c.penetration;
        c.body1.position += b1trans * hardness;
    }
    else if (c.body2.type == BodyType.Dynamic)
    {
        Vector3f b2trans = (-c.normal) * c.penetration;
        c.body2.position += b2trans * hardness;
    }
}

// Alternative position correction
void correctPositions2(Contact c)
{
    RigidBody body1 = c.body1;
    RigidBody body2 = c.body2;

    float invMass = body1.invMass + body2.invMass;
    Vector3f movePerIMass = c.normal * (c.penetration / invMass);
    
    if (body1.type == BodyType.Dynamic) 
        body1.position += movePerIMass * body1.invMass;
    if (body2.type == BodyType.Dynamic) 
        body2.position -= movePerIMass * body2.invMass;
}

