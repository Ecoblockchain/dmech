/*
Copyright (c) 2013-2014 Timur Gafarov 

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

module dlib.math.affine;

import std.math;

import dlib.math.utils;
import dlib.math.vector;
import dlib.math.matrix;

/*
 * Affine transformations
 *
 * Affine transformation is a function between affine spaces
 * which preserves points, straight lines and planes.
 * Examples of affine transformations include translation, scaling, 
 * rotation, reflection, shear and compositions of them in any 
 * combination and sequence.
 *
 * dlib uses 4x4 matrices to represent affine transformations.
 */

// TODO: fromEuler

// TODO: toEuler

/*
 * Right vector of the matrix
 */
Vector!(T,3) right(T) (Matrix!(T,4) m)
body
{
    return Vector!(T,3)(m.a11, m.a21, m.a31);
}

/*
 * Up vector of the matrix
 */
Vector!(T,3) up(T) (Matrix!(T,4) m)
body
{
    return Vector!(T,3)(m.a12, m.a22, m.a32);
}

/*
 * Forward vector of the matrix
 */
Vector!(T,3) forward(T) (Matrix!(T,4) m)
body
{
    return Vector!(T,3)(m.a13, m.a23, m.a33);
}

/*
 * Translation vector of the matrix
 */
Vector!(T,3) translation(T) (Matrix!(T,4) m)
body
{
    return Vector!(T,3)(m.a14, m.a24, m.a34);
}

/*
 * Scaling vector of the matrix
 */
Vector!(T,3) scaling(T) (Matrix!(T,4) m)
body
{
    return Vector!(T,3)(m.a11, m.a22, m.a33);
}

/* 
 * Create a matrix to perform a rotation about a world axis
 * (theta in radians)
 */
Matrix!(T,4) rotationMatrix(T) (uint rotaxis, T theta)
body
{
    auto res = Matrix!(T,4).identity;

    T s = sin(theta);
    T c = cos(theta);

    switch (rotaxis)
    {
        case Axis.x:
            res.a11 = 1.0; res.a12 = 0.0; res.a13 = 0.0;
            res.a21 = 0.0; res.a22 = c;   res.a23 =  s;
            res.a31 = 0.0; res.a32 = -s;  res.a33 =  c;
            break;

        case Axis.y:
            res.a11 = c;   res.a12 = 0.0; res.a13 = -s;
            res.a21 = 0.0; res.a22 = 1.0; res.a23 = 0.0;
            res.a31 = s;   res.a32 = 0.0; res.a33 = c;
            break;

        case Axis.z:
            res.a11 = c;   res.a12 =  s;  res.a13 = 0.0;
            res.a21 = -s;  res.a22 =  c;  res.a23 = 0.0;
            res.a31 = 0.0; res.a32 = 0.0; res.a33 = 1.0;
            break;

        default:
            assert(0);
    }

    return res;
}

/* 
 * Create a translation matrix given a translation vector
 */
Matrix!(T,4) translationMatrix(T) (Vector!(T,3) v)
body
{
    auto res = Matrix!(T,4).identity;
    res.a14 = v.x;
    res.a24 = v.y;
    res.a34 = v.z;
    return res;
}

/*
 * Create a matrix to perform scale on each axis
 */
Matrix!(T,4) scaleMatrix(T) (Vector!(T,3) v)
body
{
    auto res = Matrix!(T,4).identity;
    res.a11 = v.x;  
    res.a22 = v.y;
    res.a33 = v.z;
    return res;
}

/*
 * Setup the matrix to perform scale along an arbitrary axis
 */
Matrix!(T,4) scaleAlongAxisMatrix(T) (Vector!(T,3) scaleAxis, T k)
in
{
    assert (fabs (dot(scaleAxis, scaleAxis) - 1.0) < 0.001);
}
body
{
    auto res = Matrix!(T,4).identity;

    T a = k - 1.0;
    T ax = a * scaleAxis.x;
    T ay = a * scaleAxis.y;
    T az = a * scaleAxis.z;

    res.a11 = (ax * scaleAxis.x) + 1.0;
    res.a22 = (ay * scaleAxis.y) + 1.0;
    res.a33 = (az * scaleAxis.z) + 1.0;

    res.a12 = res.a21 = (ax * scaleAxis.y);
    res.a13 = res.a31 = (ax * scaleAxis.z);
    res.a23 = res.a32 = (ay * scaleAxis.z);

    return res;
}

/*
 * Setup the matrix to perform a shear
 *
 * NOTE: needs test
 */
Matrix!(T,4) shearMatrix(T) (uint shearAxis, T s, T t)
body
{
    auto res = Matrix!(T,4).identity;

    switch (shearAxis)
    {
        case Axis.x:
            res.a11 = 1.0; res.a12 = 0.0; res.a13 = 0.0;
            res.a21 = s;   res.a22 = 1.0; res.a23 = 0.0;
            res.a31 = t;   res.a32 = 0.0; res.a33 = 1.0;
            break;

        case Axis.y:
            res.a11 = 1.0; res.a12 = s;   res.a13 = 0.0;
            res.a21 = 0.0; res.a22 = 1.0; res.a23 = 0.0;
            res.a31 = 0.0; res.a32 = t;   res.a33 = 1.0;
            break;

        case Axis.z:
            res.a11 = 1.0; res.a12 = 0.0; res.a13 = s;
            res.a21 = 0.0; res.a22 = 1.0; res.a23 = t;
            res.a31 = 0.0; res.a32 = 0.0; res.a33 = 1.0;
            break;

        default:
            assert(0);
    }

    return res;
}

/* 
 * Setup the matrix to perform a projection onto a plane passing
 * through the origin. The plane is perpendicular to the
 * unit vector n.
 *
 * NOTE: needs test
 */
Matrix!(T,4) projectionMatrix(T) (Vector!(T,3) n)
in
{
    assert (fabs(dot(n, n) - 1.0) < 0.001);
}
body
{
    auto res = Matrix!(T,4).identity;

    res.a11 = 1.0 - (n.x * n.x);
    res.a22 = 1.0 - (n.y * n.y);
    res.a33 = 1.0 - (n.z * n.z);

    res.a12 = res.a21 = -(n.x * n.y);
    res.a13 = res.a31 = -(n.x * n.z);
    res.a23 = res.a32 = -(n.y * n.z);

    return res;
}

// TODO: reflectionMatrix

// TODO: axisReflectionMatrix

/*
 * Setup the matrix to perform a "Look At" transformation 
 * like a first person camera
 */
Matrix!(T,4) lookAtMatrix(T) (Vector!(T,3) camPos, Vector!(T,3) target, Vector!(T,3) camUp)
body
{
    auto rot = Matrix!(T,4).identity;

    Vector!(T,3) forward = (camPos - target).normalized;
    Vector!(T,3) right = cross(camUp, forward).normalized;
    Vector!(T,3) up = cross(forward, right).normalized;

    rot.a11 = right.x;
    rot.a21 = right.y;
    rot.a31 = right.z;

    rot.a12 = up.x;
    rot.a22 = up.y;
    rot.a32 = up.z;

    rot.a13 = forward.x;
    rot.a23 = forward.y;
    rot.a33 = forward.z;

    auto trans = translationMatrix(-camPos);
    return (rot * trans);
}

// TODO: frustumMatrix

/*
 * Setup a perspective matrix given the field-of-view in the Y direction
 * in degrees, the aspect ratio of Y/X, and near and far plane distances
 */
Matrix!(T,4) perspectiveMatrix(T) (T fovY, T aspect, T n, T f)
body
{
    auto res = Matrix!(T,4).identity;

    T angle;
    T cot;

    angle = fovY / 2.0;
    angle = degtorad(angle);

    cot = cos(angle) / sin(angle);

    res.arrayof[0] = cot / aspect;
    res.arrayof[1] = 0.0;
    res.arrayof[2] = 0.0;
    res.arrayof[3] = 0.0;

    res.arrayof[4] = 0.0;
    res.arrayof[5] = cot;
    res.arrayof[6] = 0.0;
    res.arrayof[7] = 0.0;

    res.arrayof[8] = 0.0;
    res.arrayof[9] = 0.0;
    res.arrayof[10]= -(f + n) / (f - n);
    res.arrayof[11]= -1.0f; //-(2 * f * n) / (f - n);

    res.arrayof[12]= 0.0;
    res.arrayof[13]= 0.0;
    res.arrayof[14]= -(2 * f * n) / (f - n); //-1.0;
    res.arrayof[15]= 0.0;

    return res;
}

// TODO: orthoMatrix

/*
 * Setup an orientation matrix using 3 basis normalized vectors
 */
Matrix!(T,4) orthoNormalMatrix(T) (Vector!(T,3) xdir, Vector!(T,3) ydir, Vector!(T,3) zdir)
body
{
    auto res = Matrix!(T,4).identity;

    res.arrayof[0] = xdir.x; res.arrayof[4] = ydir.x; res.arrayof[8] = zdir.x; res.arrayof[12] = 0.0;
    res.arrayof[1] = xdir.y; res.arrayof[5] = ydir.y; res.arrayof[9] = zdir.y; res.arrayof[13] = 0.0;
    res.arrayof[2] = xdir.z; res.arrayof[6] = ydir.z; res.arrayof[10]= zdir.z; res.arrayof[14] = 0.0;
    res.arrayof[3] = 0.0;    res.arrayof[7] = 0.0;    res.arrayof[11]= 0.0;    res.arrayof[15] = 1.0;

    return res;
}

// TODO: shadowMatrix

// TODO: directionToMatrix

// TODO: rotationBetweenVectors

/*
 * Transformations in 2D space
 */
Matrix!(T,2) rotation(T) (T theta)
body
{
    Matrix!(T,2) res;
    T s = sin(theta);
    T c = cos(theta);
    res.a11 = c;  res.a12 = s;
    res.a21 = -s; res.a22 = c;
    return res;
}

// TODO: generalize for arbitrary dimension
// TODO: probably move to dlib.math.vector
Matrix!(T,2) tensorProduct(T) (Vector!(T,2) u, Vector!(T,2) v)
body
{
    Matrix!(T,2) res;
    res[0] = u[0] * v[0];
    res[1] = u[1] * v[0];
    res[2] = u[0] * v[1];
    res[3] = u[1] * v[1];
    return res;
}

alias tensorProduct outerProduct;

unittest
{
    bool isAlmostZero(Vector4f v)
    {
        float e = 0.002f;
        
        return abs(v.x) < e &&
               abs(v.y) < e &&
               abs(v.z) < e &&
               abs(v.w) < e;
    }

    // build ModelView (World to Camera)    
    vec3 center = vec3(0.0f, 0.0f, 0.0f);
    vec3 eye = center + vec3(0.0f, 1.0f, 1.0f);
    vec3 up = vec3(0.0f, -0.707f, 0.707f);

    Matrix4f modelView = lookAtMatrix(eye, center, up);
    
    // build Projection (Camera to Eye)
    Matrix4f projection = perspectiveMatrix(45.0f, 16.0f / 9.0f, 1.0f, 100.0f);
    
    // compose into one transformation
    Matrix4f projectionModelView = projection * modelView;
    
    vec4 positionInWorld = vec4(0.0f, 0.0f, 0.0f, 1.0f);
    
    vec4 transformed1 =
        positionInWorld * projectionModelView;
        
    vec4 transformed2 =
        (positionInWorld * modelView) * projection;
        
    assert(isAlmostZero(transformed1 - transformed2));
}
